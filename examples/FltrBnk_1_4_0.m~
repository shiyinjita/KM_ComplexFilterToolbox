% The first two filters are analog (continuous-time) filters.

% A symetric filter that should be real

%w_shift = pi*j;
w_shift = 0.0j;
p = [-0.1 -0.06 0.06 0.1]; % initial guess at finite loss poles
ni=1; % number of loss poles at infinity
wp = []; ws = [];
wp(1) = -0.025; % lower passband edge
wp(2) = 0.025; % upper passband edge
ws = [-0.49 -0.049 0.049 0.49];
as = [70 50 50 70];
Ap = 0.02; % the passband ripple in dB
px = [];
ONE_STP = 0;
% A positive-pass continuous-time filter with a elliptic pass-band

svSpecs = {p, px, wp, ws};

[p_, px_, wp_, ws_] = shiftSpecs(p, px, wp, ws, 0.05);

H1 = dsgnDigitalFltr(p_, px_, ni, wp_, ws_, as, Ap, 'monotonic');
%[ax1, ax2] = plot_drsps(H1, wp_, ws_, 'b', [-0.5 0.5 -40 1]);
cscdFltr1 = mkCscdFltrD(H1, wp_);
%cscdFltr1.plotGn(wp_, ws_, -40, 2);
xin = zeros(8192,1);
xin(1) = 1;
fShft = 0;
out = simCscd(cscd, xin, fShft)
a=1;